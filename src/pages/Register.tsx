import { useNavigate } from "react-router-dom";
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { PersonalInfoSection } from "@/components/registration/PersonalInfoSection";
import { NextOfKinSection } from "@/components/registration/NextOfKinSection";
import { SpousesSection } from "@/components/registration/SpousesSection";
import { DependantsSection } from "@/components/registration/DependantsSection";
import { MembershipSection } from "@/components/registration/MembershipSection";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { InfoIcon } from "lucide-react";
import { useState, useRef } from "react";
import { supabase } from "@/integrations/supabase/client";
import type { TablesInsert } from "@/integrations/supabase/types";

export default function Register() {
  const navigate = useNavigate();
  const { toast } = useToast();
  const { register, handleSubmit, setValue, watch } = useForm();
  const [selectedCollectorId, setSelectedCollectorId] = useState<string>("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const spousesSectionRef = useRef<any>(null);
  const dependantsSectionRef = useRef<any>(null);

  const onSubmit = async (data: any) => {
    try {
      setIsSubmitting(true);
      console.log("Starting registration process with data:", { 
        ...data, 
        collectorId: selectedCollectorId,
        spouses: spousesSectionRef.current?.getSpouses(),
        dependants: dependantsSectionRef.current?.getDependants()
      });

      if (!selectedCollectorId) {
        toast({
          title: "Registration failed",
          description: "Please select a collector",
          variant: "destructive",
        });
        return;
      }

      // Step 1: Create member record first
      const memberData: TablesInsert<'members'> = {
        full_name: data.fullName,
        email: data.email,
        phone: data.mobile,
        address: data.address,
        town: data.town,
        postcode: data.postCode,
        date_of_birth: data.dob,
        gender: data.gender,
        marital_status: data.maritalStatus,
        collector_id: selectedCollectorId,
        status: 'pending',
        member_number: '', // This will be auto-generated by the trigger
        verified: false,
        cors_enabled: true
      };

      const { data: member, error: memberError } = await supabase
        .from('members')
        .insert(memberData)
        .select()
        .single();

      if (memberError) {
        console.error("Member creation error:", memberError);
        throw new Error(memberError.message);
      }

      // Step 2: Create auth user
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: data.email,
        password: data.password,
        options: {
          data: {
            full_name: data.fullName,
          },
        },
      });

      if (authError) {
        console.error("Auth creation error:", authError);
        // Cleanup the member record if auth creation fails
        await supabase.from('members').delete().eq('id', member.id);
        throw new Error(authError.message);
      }

      // Step 3: Create registration record
      const { error: registrationError } = await supabase
        .from('registrations')
        .insert({
          member_id: member.id,
          status: 'pending'
        });

      if (registrationError) {
        console.error("Registration record creation error:", registrationError);
        throw new Error(registrationError.message);
      }

      // Step 4: Handle family members if any
      const spouses = spousesSectionRef.current?.getSpouses() || [];
      const dependants = dependantsSectionRef.current?.getDependants() || [];

      if (spouses.length > 0 || dependants.length > 0) {
        const familyMembers = [
          ...spouses.map((spouse: any) => ({
            member_id: member.id,
            name: spouse.name,
            date_of_birth: spouse.dateOfBirth,
            relationship: 'spouse'
          })),
          ...dependants.map((dependant: any) => ({
            member_id: member.id,
            name: dependant.name,
            date_of_birth: dependant.dateOfBirth,
            relationship: dependant.category
          }))
        ];

        const { error: familyError } = await supabase
          .from('family_members')
          .insert(familyMembers);

        if (familyError) {
          console.error("Family members creation error:", familyError);
          toast({
            title: "Note",
            description: "Registration successful but there was an issue adding family members. Please contact support.",
            variant: "default",
          });
        }
      }

      toast({
        title: "Registration successful",
        description: "Your registration has been submitted and is pending approval.",
      });

      // Redirect to login page
      navigate("/login");
    } catch (error: any) {
      console.error("Registration error:", error);
      
      toast({
        title: "Registration failed",
        description: error.message || "An error occurred during registration. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container py-8 max-w-4xl mx-auto">
      <Card className="shadow-lg">
        <CardHeader className="bg-primary/5 border-b">
          <CardTitle className="text-2xl text-center text-primary">
            PWA Burton On Trent Registration Form
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          <Alert className="mb-6 bg-blue-50 border-blue-200">
            <InfoIcon className="h-4 w-4 text-blue-500" />
            <AlertDescription className="text-sm text-blue-700">
              Your personal information will be processed in accordance with our Privacy Policy and the GDPR.
              We collect this information to manage your membership and provide our services.
            </AlertDescription>
          </Alert>
          
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
            <div className="space-y-8 divide-y divide-gray-200">
              <PersonalInfoSection register={register} setValue={setValue} watch={watch} />
              <NextOfKinSection />
              <SpousesSection ref={spousesSectionRef} />
              <DependantsSection ref={dependantsSectionRef} />
              <MembershipSection onCollectorChange={setSelectedCollectorId} />
            </div>
            
            <div className="mt-8 pt-6 border-t">
              <Button 
                type="submit" 
                className="w-full bg-primary hover:bg-primary/90"
                disabled={isSubmitting}
              >
                {isSubmitting ? "Submitting..." : "Submit Registration"}
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}